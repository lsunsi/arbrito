{
  "address": "0x0aF72DF780386476558BD8E8EEB5c821209bfE95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Arbrito.Borrow",
          "name": "borrow",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "uniswapPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "balancerPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapToken0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapToken1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "uniswapReserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uniswapReserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balancerBalance0",
          "type": "uint256"
        }
      ],
      "name": "perform",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a58e9b54d54554a22c25b5e7d9e2a9989f84b2dbf8773384a8f3891a562a37d",
  "receipt": {
    "to": null,
    "from": "0xAf43007aD675D6C72E96905cf4d8acB58ba0E041",
    "contractAddress": "0x0aF72DF780386476558BD8E8EEB5c821209bfE95",
    "transactionIndex": 108,
    "gasUsed": "1037410",
    "logsBloom": "0x
    "blockHash": "0xb24de6f55499ec0724d1494281a95a113b236fa3525ae7e08042861cf495d82c",
    "transactionHash": "0x8a58e9b54d54554a22c25b5e7d9e2a9989f84b2dbf8773384a8f3891a562a37d",
    "logs": [],
    "blockNumber": 11388627,
    "cumulativeGasUsed": "10969882",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "291a7f23e94b5c24f86979ba3041f466",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Arbrito.Borrow\",\"name\":\"borrow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balancerPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapToken1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniswapReserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniswapReserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balancerBalance0\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arbrito.sol\":\"Arbrito\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000000},\"remappings\":[]},\"sources\":{\"contracts/Arbrito.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.5;\\n\\nimport \\\"./external/IBalancer.sol\\\";\\nimport \\\"./external/IUniswap.sol\\\";\\nimport \\\"./external/IERC20.sol\\\";\\nimport \\\"./external/IWeth.sol\\\";\\n\\ncontract Arbrito is IUniswapPairCallee {\\n  enum Borrow { Token0, Token1 }\\n\\n  address[] public tokens;\\n  mapping(address => uint256) public balances;\\n\\n  address immutable WETH_ADDRESS;\\n  address immutable UNISWAP_ROUTER_ADDRESS;\\n  address payable immutable OWNER;\\n\\n  constructor(address wethAddress, address uniswapRouterAddress) {\\n    UNISWAP_ROUTER_ADDRESS = uniswapRouterAddress;\\n    WETH_ADDRESS = wethAddress;\\n    OWNER = msg.sender;\\n  }\\n\\n  receive() external payable {}\\n\\n  function perform(\\n    Borrow borrow,\\n    uint256 amount,\\n    address uniswapPair,\\n    address balancerPool,\\n    address uniswapToken0,\\n    address uniswapToken1,\\n    uint256 uniswapReserve0,\\n    uint256 uniswapReserve1,\\n    uint256 balancerBalance0\\n  ) external {\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapPair(uniswapPair).getReserves();\\n\\n    require(\\n      borrow == Borrow.Token0\\n        ? (reserve0 >= uniswapReserve0 && reserve1 <= uniswapReserve1)\\n        : (reserve0 <= uniswapReserve0 && reserve1 >= uniswapReserve1),\\n      \\\"Uniswap reserves mismatch\\\"\\n    );\\n\\n    require(\\n      IBalancerPool(balancerPool).getBalance(uniswapToken0) == balancerBalance0,\\n      \\\"Balancer balance0 mismatch\\\"\\n    );\\n\\n    bytes memory payload =\\n      abi.encode(balancerPool, uniswapToken0, uniswapToken1, reserve0, reserve1);\\n\\n    if (borrow == Borrow.Token0) {\\n      IUniswapPair(uniswapPair).swap(amount, 0, address(this), payload);\\n    } else {\\n      IUniswapPair(uniswapPair).swap(0, amount, address(this), payload);\\n    }\\n  }\\n\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external override {\\n    (\\n      address balancerPoolAddress,\\n      address token0,\\n      address token1,\\n      uint256 reserve0,\\n      uint256 reserve1\\n    ) = abi.decode(data, (address, address, address, uint256, uint256));\\n\\n    uint256 amountTrade;\\n    uint256 amountPayback;\\n\\n    address tokenPayback;\\n    address tokenTrade;\\n\\n    if (amount0 != 0) {\\n      amountTrade = amount0;\\n      (tokenTrade, tokenPayback) = (token0, token1);\\n      amountPayback = calculateUniswapPayback(amountTrade, reserve1, reserve0);\\n    } else {\\n      amountTrade = amount1;\\n      (tokenPayback, tokenTrade) = (token0, token1);\\n      amountPayback = calculateUniswapPayback(amountTrade, reserve0, reserve1);\\n    }\\n\\n    allow(sender, balancerPoolAddress, tokenTrade, amountTrade);\\n\\n    (uint256 balancerAmountOut, ) =\\n      IBalancerPool(balancerPoolAddress).swapExactAmountIn(\\n        tokenTrade,\\n        amountTrade,\\n        tokenPayback,\\n        amountPayback,\\n        uint256(-1)\\n      );\\n\\n    require(IERC20(tokenPayback).transfer(msg.sender, amountPayback), \\\"Payback failed\\\");\\n\\n    if (balances[tokenPayback] == 0) {\\n      tokens.push(tokenPayback);\\n    }\\n\\n    balances[tokenPayback] += balancerAmountOut - amountPayback;\\n  }\\n\\n  function allow(\\n    address owner,\\n    address spender,\\n    address token,\\n    uint256 amount\\n  ) internal {\\n    if (IERC20(token).allowance(owner, spender) < amount) {\\n      IERC20(token).approve(spender, uint256(-1));\\n    }\\n  }\\n\\n  function calculateUniswapPayback(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256) {\\n    uint256 numerator = reserveIn * amountOut * 1000;\\n    uint256 denominator = (reserveOut - amountOut) * 997;\\n    return numerator / denominator + 1;\\n  }\\n\\n  function withdraw() external {\\n    address[] memory path = new address[](2);\\n    address me = address(this);\\n    path[1] = WETH_ADDRESS;\\n\\n    uint256 weth = 0;\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      address token = tokens[i];\\n\\n      if (token == WETH_ADDRESS) {\\n        weth += balances[token];\\n      } else {\\n        path[0] = token;\\n\\n        allow(me, UNISWAP_ROUTER_ADDRESS, token, balances[token]);\\n\\n        weth += IUniswapRouter(UNISWAP_ROUTER_ADDRESS).swapExactTokensForTokens(\\n          balances[token],\\n          0,\\n          path,\\n          me,\\n          block.timestamp\\n        )[1];\\n      }\\n\\n      delete balances[token];\\n    }\\n\\n    delete tokens;\\n\\n    IWeth(WETH_ADDRESS).withdraw(weth);\\n    OWNER.transfer(weth);\\n  }\\n}\\n\",\"keccak256\":\"0xe8fe93452547b0b989d3b2fb9e29732fc35baa646487bcea5a0214108df3e12a\",\"license\":\"GPL-3.0-only\"},\"contracts/external/IBalancer.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.5;\\n\\ninterface IBalancerPool {\\n  function swapExactAmountIn(\\n    address tokenIn,\\n    uint256 tokenAmountIn,\\n    address tokenOut,\\n    uint256 minAmountOut,\\n    uint256 maxPrice\\n  ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n  function getBalance(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c887469da7ebf670883bba1cc37add016ce9aa09f886837f63977a48773f31f\",\"license\":\"GPL-3.0-only\"},\"contracts/external/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3913d60ce76f9f7cdbfbd4a0b5d011356ba588e4164d882ec5ed5852b7e02893\",\"license\":\"GPL-3.0-only\"},\"contracts/external/IUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.5;\\n\\ninterface IUniswapPairCallee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\\ninterface IUniswapRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapPair {\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x4518a145ee2cb1b2625a7fbcda75e8487686e3180986d20aea684b3583f38996\",\"license\":\"GPL-3.0-only\"},\"contracts/external/IWeth.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.5;\\n\\ninterface IWeth {\\n  function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x13ebe8eb5b0ef8c0acbfb724c2728858f5b8e68fb525cd24efd2458286b75294\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516112773803806112778339818101604052604081101561003357600080fd5b508051602090910151606081811b6001600160601b031990811660a05283821b16608052339081901b60c0526001600160a01b0392831692909116906111d66100a160003980610f3b525080610bd05280610c37525080610a815280610b2b5280610e9a52506111d66000f3fe60806040526004361061005e5760003560e01c806331b30a7f1161004357806331b30a7f146101645780633ccfd60b146101e15780634f64b2be146101f657610065565b806310d1e85c1461006a57806327e235e31461011257610065565b3661006557005b600080fd5b34801561007657600080fd5b506101106004803603608081101561008d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591604082013591908101906080810160608201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b509092509050610249565b005b34801561011e57600080fd5b506101526004803603602081101561013557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105a2565b60408051918252519081900360200190f35b34801561017057600080fd5b50610110600480360361012081101561018857600080fd5b5060ff8135169060208101359073ffffffffffffffffffffffffffffffffffffffff60408201358116916060810135821691608082013581169160a08101359091169060c08101359060e08101359061010001356105b4565b3480156101ed57600080fd5b50610110610a5a565b34801561020257600080fd5b506102206004803603602081101561021957600080fd5b5035610f8c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000806000806000868660a081101561026157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116965060208201358116955060408201351693506060810135925060800135905060008080808c156102c057508b9250859050866102b9848688610fc3565b92506102d6565b508a9250869050856102d3848787610fc3565b92505b6102e28e8a8387610feb565b604080517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018790528481166044830152606482018690527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60848301528251600093918d1692638201aa3f9260a480830193919282900301818787803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050506040513d60408110156103b857600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101879052905191925073ffffffffffffffffffffffffffffffffffffffff85169163a9059cbb916044808201926020929091908290030181600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d602081101561045d57600080fd5b50516104ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5061796261636b206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461056257600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600160205260409020805493909203929092019055505050505050505050505050565b60016020526000908152604090205481565b6000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d606081101561062757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008b600181111561065557fe5b1461066f5784821115801561066a5750838110155b61067f565b84821015801561067f5750838111155b6106ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f556e6973776170207265736572766573206d69736d6174636800000000000000604482015290519081900360640190fd5b828873ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d602081101561077c57600080fd5b5051146107ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f42616c616e6365722062616c616e636530206d69736d61746368000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff808b166020830152808a1682840152881660608201526080810184905260a08082018490528251808303909101815260c090910190915260008c600181111561084857fe5b141561094f578973ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8c600030856040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108e35781810151838201526020016108cb565b50505050905090810190601f1680156109105780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50505050610a4c565b8973ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008d30856040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109e45781810151838201526020016109cc565b50505050905090810190601f168015610a115780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b505050505b505050505050505050505050565b604080516002808252606080830184529260208301908036833701905050905060003090507f000000000000000000000000000000000000000000000000000000000000000082600181518110610aad57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000805b600054811015610e8c576000808281548110610b0357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691507f000000000000000000000000000000000000000000000000000000000000000016811415610b825773ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020549290920191610e5c565b8085600081518110610b9057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610c35847f000000000000000000000000000000000000000000000000000000000000000083600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610feb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460008888426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610d33578181015183820152602001610d1b565b505050509050019650505050505050600060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610db757600080fd5b8101908080516040519392919084640100000000821115610dd757600080fd5b908301906020820185811115610dec57600080fd5b8251866020820283011164010000000082111715610e0957600080fd5b82525081516020918201928201910280838360005b83811015610e36578181015183820152602001610e1e565b50505050905001604052505050600181518110610e4f57fe5b6020026020010151830192505b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604082209190915501610aeb565b50610e98600080611166565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016925083156108fc02915083906000818181858888f19350505050158015610f86573d6000803e3d6000fd5b50505050565b60008181548110610f9c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60006103e8838502026103e585840302808281610fdc57fe5b04600101925050509392505050565b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d602081101561109b57600080fd5b50511015610f86578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561113457600080fd5b505af1158015611148573d6000803e3d6000fd5b505050506040513d602081101561115e57600080fd5b505050505050565b50805460008255906000526020600020908101906111849190611187565b50565b5b8082111561119c5760008155600101611188565b509056fea2646970667358221220523bd80173160e3db3c7c8011e69cc1e9a46a8de0f32e495868c22a28f4ef78664736f6c63430007050033",
  "deployedBytecode": "0x60806040526004361061005e5760003560e01c806331b30a7f1161004357806331b30a7f146101645780633ccfd60b146101e15780634f64b2be146101f657610065565b806310d1e85c1461006a57806327e235e31461011257610065565b3661006557005b600080fd5b34801561007657600080fd5b506101106004803603608081101561008d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591604082013591908101906080810160608201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b509092509050610249565b005b34801561011e57600080fd5b506101526004803603602081101561013557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105a2565b60408051918252519081900360200190f35b34801561017057600080fd5b50610110600480360361012081101561018857600080fd5b5060ff8135169060208101359073ffffffffffffffffffffffffffffffffffffffff60408201358116916060810135821691608082013581169160a08101359091169060c08101359060e08101359061010001356105b4565b3480156101ed57600080fd5b50610110610a5a565b34801561020257600080fd5b506102206004803603602081101561021957600080fd5b5035610f8c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6000806000806000868660a081101561026157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116965060208201358116955060408201351693506060810135925060800135905060008080808c156102c057508b9250859050866102b9848688610fc3565b92506102d6565b508a9250869050856102d3848787610fc3565b92505b6102e28e8a8387610feb565b604080517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018790528481166044830152606482018690527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60848301528251600093918d1692638201aa3f9260a480830193919282900301818787803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050506040513d60408110156103b857600080fd5b5051604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101879052905191925073ffffffffffffffffffffffffffffffffffffffff85169163a9059cbb916044808201926020929091908290030181600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d602081101561045d57600080fd5b50516104ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5061796261636b206661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461056257600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600160205260409020805493909203929092019055505050505050505050505050565b60016020526000908152604090205481565b6000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105fd57600080fd5b505afa158015610611573d6000803e3d6000fd5b505050506040513d606081101561062757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008b600181111561065557fe5b1461066f5784821115801561066a5750838110155b61067f565b84821015801561067f5750838111155b6106ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f556e6973776170207265736572766573206d69736d6174636800000000000000604482015290519081900360640190fd5b828873ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561075257600080fd5b505afa158015610766573d6000803e3d6000fd5b505050506040513d602081101561077c57600080fd5b5051146107ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f42616c616e6365722062616c616e636530206d69736d61746368000000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff808b166020830152808a1682840152881660608201526080810184905260a08082018490528251808303909101815260c090910190915260008c600181111561084857fe5b141561094f578973ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8c600030856040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108e35781810151838201526020016108cb565b50505050905090810190601f1680156109105780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50505050610a4c565b8973ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008d30856040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109e45781810151838201526020016109cc565b50505050905090810190601f168015610a115780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b505050505b505050505050505050505050565b604080516002808252606080830184529260208301908036833701905050905060003090507f000000000000000000000000000000000000000000000000000000000000000082600181518110610aad57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000805b600054811015610e8c576000808281548110610b0357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff90811691507f000000000000000000000000000000000000000000000000000000000000000016811415610b825773ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020549290920191610e5c565b8085600081518110610b9057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610c35847f000000000000000000000000000000000000000000000000000000000000000083600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610feb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460008888426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610d33578181015183820152602001610d1b565b505050509050019650505050505050600060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610db757600080fd5b8101908080516040519392919084640100000000821115610dd757600080fd5b908301906020820185811115610dec57600080fd5b8251866020820283011164010000000082111715610e0957600080fd5b82525081516020918201928201910280838360005b83811015610e36578181015183820152602001610e1e565b50505050905001604052505050600181518110610e4f57fe5b6020026020010151830192505b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604082209190915501610aeb565b50610e98600080611166565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016925083156108fc02915083906000818181858888f19350505050158015610f86573d6000803e3d6000fd5b50505050565b60008181548110610f9c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60006103e8838502026103e585840302808281610fdc57fe5b04600101925050509392505050565b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561107157600080fd5b505afa158015611085573d6000803e3d6000fd5b505050506040513d602081101561109b57600080fd5b50511015610f86578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561113457600080fd5b505af1158015611148573d6000803e3d6000fd5b505050506040513d602081101561115e57600080fd5b505050505050565b50805460008255906000526020600020908101906111849190611187565b50565b5b8082111561119c5760008155600101611188565b509056fea2646970667358221220523bd80173160e3db3c7c8011e69cc1e9a46a8de0f32e495868c22a28f4ef78664736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Arbrito.sol:Arbrito",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/Arbrito.sol:Arbrito",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}